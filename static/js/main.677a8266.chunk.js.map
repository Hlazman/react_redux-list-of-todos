{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodoId","id","isSelectedTodo","visableTodos","filterState","completed","title","toLowerCase","includes","length","className","map","classNames","onClick","currentTodoActions","handleSelect","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","FiltersActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","loadUser","a","userId","loadedUser","useEffect","href","email","name","App","isLoad","setIsLoad","loadTodos","todosFromServer","todosActions","err","Error","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.677a8266.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET-QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET-STATUS';\n  payload: Status;\n};\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst setQuery = (query: string): SetQueryAction => {\n  return {\n    type: 'filter/SET-QUERY',\n    payload: query,\n  };\n};\n\nconst setStatus = (status: Status): SetStatusAction => {\n  return {\n    type: 'filter/SET-STATUS',\n    payload: status,\n  };\n};\n\nexport const actions = { setQuery, setStatus };\n\nconst filterReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/SET-QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/SET-STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\ntype Action = SetTodosAction;\n\nconst setTodos = (todos: Todo[]): SetTodosAction => {\n  return {\n    type: 'todos/SET',\n    payload: todos,\n  };\n};\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const selectedTodoId = useAppSelector(state => state.currentTodo?.id);\n  const isSelectedTodo = (id: number) => selectedTodoId === id;\n  const handleSelect = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  const visableTodos = useAppSelector(state => {\n    const { todos, filter: filterState } = state;\n\n    return todos.filter(todo => {\n      switch (filterState.status) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    }).filter(todo => todo.title.toLowerCase().includes(filterState.query.toLowerCase()));\n  });\n\n  return (\n    <>\n      {visableTodos.length <= 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {visableTodos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visableTodos.map(todo => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr\n                  key={id}\n                  data-cy=\"todo\"\n                  className={classNames({\n                    'has-background-info-light': isSelectedTodo(id),\n                  })}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames({\n                        'has-text-danger': !completed,\n                        'has-text-success': completed,\n                      })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleSelect(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('far', {\n                            'fa-eye': !isSelectedTodo(id),\n                            'fa-eye-slash': isSelectedTodo(id),\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as FiltersActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.filter);\n\n  const handleFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    dispatch(FiltersActions.setStatus(value as Status));\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    dispatch(FiltersActions.setQuery(value));\n  };\n\n  const handleRemoveQuery = () => {\n    dispatch(FiltersActions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={todos.status}\n            onChange={handleFilter}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={todos.query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {todos.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleRemoveQuery}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  const removeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  const loadUser = async () => {\n    if (todo) {\n      const loadedUser = await getUser(todo?.userId);\n\n      setUser(loadedUser);\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, [todo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && (<Loader />)}\n\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n\n              {todo?.completed && (\n                <strong className=\"has-text-success\">Done by </strong>)}\n\n              {!todo?.completed && (\n                <strong className=\"has-text-danger\">Planned by </strong>)}\n\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoad, setIsLoad] = useState(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const isSelectedTodo = currentTodo !== null;\n\n  const loadTodos = async () => {\n    setIsLoad(true);\n    const todosFromServer = await getTodos();\n\n    await dispatch(todosActions.setTodos(todosFromServer));\n    setIsLoad(false);\n  };\n\n  useEffect(() => {\n    try {\n      loadTodos();\n    } catch (err) {\n      throw new Error('Something went wrong');\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n\n              {/* {isLoad ? <Loader /> : <TodoList />} */}\n              {isLoad && (<Loader />)}\n              {!isLoad && (<TodoList />)}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isSelectedTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}